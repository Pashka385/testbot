# -*- coding: utf-8 -*-
import telebot
from telebot import types
import configparser
import threading
import schedule
import logging
import random
import datetime
import pytz
import time
import sys

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
sys.stdout.reconfigure(encoding='utf-8')
logging.basicConfig(filename='bot_log.txt', level=logging.ERROR, format='%(asctime)s [%(levelname)s] %(message)s')

# –ö–æ–Ω—Ñ–∏–≥
config = configparser.ConfigParser()
config.read('config.ini')
BOT_TOKEN = config.get('BotConfig', 'BOT_TOKEN')
operators_str = config.get('BotConfig', 'operators')
operators = [int(x) for x in operators_str.split(',')] if operators_str.strip() else []
time_wait_for_send_message = int(config.get('BotConfig', 'time_wait_for_send_message'))

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
media_group_dict = {}  # { media_group_id: {'items': [InputMedia...], 'timer': Timer, 'caption': str, 'user_id': int, 'sender_info': str, 'last_update': float} }
user_data = {}         # { user_id: {captcha_status, captcha_answer, message_pool_status, last_message_time} }

# –ë–æ—Ç
bot = telebot.TeleBot(BOT_TOKEN)

# =============================
# –£–¢–ò–õ–ò–¢–´/–°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================

def clear_dicts():
    global media_group_dict, user_data
    media_group_dict = {}
    user_data = {}
    print("[BOT] The dictionaries have been cleared")

def run_clear_dict_scheduler():
    my_scheduler = schedule.Scheduler()
    my_scheduler.every().day.at("03:00").do(clear_dicts)
    while True:
        my_scheduler.run_pending()
        time.sleep(1)

def can_send_message(user_id, current_time):
    """–ê–Ω—Ç–∏—Ñ–ª—É–¥: —Ç–µ–∫—Å—Ç –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ N —Å–µ–∫—É–Ω–¥."""
    if current_time - user_data[user_id]["last_message_time"] < time_wait_for_send_message:
        send_wait_60_sec(user_id)
        return False
    return True

def is_command(user_input: str) -> bool:
    if not user_input:
        return False
    return user_input.startswith("/") or user_input.startswith(("‚ùó","üìñ","üí¨","üîÑ","‚óÄÔ∏è"))

def generate_captcha(user_id):
    num1 = random.randint(0, 10)
    num2 = random.randint(0, 10)
    ans = num1 + num2
    user_data[user_id]["captcha_answer"] = ans
    example = f"{num1} + {num2} = ?"
    send_solve_captcha(user_id, example)

def need_captcha(user_id):
    """True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É."""
    if user_data.get(user_id):
        return not user_data[user_id]["captcha_status"]
    return True

def new_user(user_id):
    user_data[user_id] = {
        "captcha_status": False,
        "captcha_answer": 12345,
        "message_pool_status": False,
        "last_message_time": 0,
    }

def message_pool(user_id):
    return user_data[user_id]["message_pool_status"]

def telegram_id_check(telegram_id: str) -> bool:
    return telegram_id.isdigit()

def chat_exists(user_id: int) -> bool:
    try:
        bot.get_chat(user_id)
        return True
    except telebot.apihelper.ApiTelegramException as e:
        if "chat not found" in str(e):
            return False
        else:
            raise e

def add_operator(user_id, operator_id):
    if not telegram_id_check(operator_id):
        bot.send_message(user_id, "‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID (–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)")
        return
    operator_id = int(operator_id)
    if not chat_exists(operator_id):
        bot.send_message(user_id, "‚ùó–ß–∞—Ç–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ë—É–¥—É—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É")
        return
    global operators
    if operator_id not in operators:
        operators.append(operator_id)
        config.set('BotConfig', 'operators', ','.join(map(str, operators)))
        with open('config.ini', 'w') as f:
            config.write(f)
        bot.send_message(user_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä: {operator_id}")
        print(f"[BOT] Operators list has been changed: {operators}")
    else:
        bot.send_message(user_id, "‚ùó–¢–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω")

def remove_operator(user_id, operator_id):
    if not telegram_id_check(operator_id):
        bot.send_message(user_id, "‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID (–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)")
        return
    operator_id = int(operator_id)
    global operators
    if operator_id in operators:
        operators.remove(operator_id)
        config.set('BotConfig', 'operators', ','.join(map(str, operators)))
        with open('config.ini', 'w') as f:
            config.write(f)
        bot.send_message(user_id, f"‚úÖ –£–¥–∞–ª—ë–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä: {operator_id}")
        print(f"[BOT] Operators list has been changed: {operators}")
    else:
        bot.send_message(user_id, "‚ùó–¢–∞–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç")

def list_operator():
    return operators

# =============================
# –¢–ï–ö–°–¢–´
# =============================

BTN_INST = "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
BTN_SEND = "üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
BTN_BACK = "‚óÄÔ∏è –ù–∞–∑–∞–¥"
BTN_NEW = "üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä"
BTN_OP_HELP = "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"

def send_instruction(user_id):
    message_instruction = (
        "üîò –í–∞–∂–Ω–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤ Telegram).\n\n"
        "üîò –ü–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫ —Å–≤–æ–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –≤—Å—ë —ç—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞–º.\n\n"
        "üîò –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.\n\n"
        "üîò –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –í–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞–º–∏."
    )
    bot.send_message(user_id, message_instruction, reply_markup=get_main_keyboard())

def send_bottask_message(user_id):
    bot.send_message(user_id, "‚ùó–†–µ—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º –æ—Ç—Å–µ—è—Ç—å –±–æ—Ç–æ–≤.", reply_markup=get_keyboard_captcha())

def send_wait_60_sec(user_id):
    bot.send_message(user_id, "‚ùó–ü–æ–¥–æ–∂–¥–∏—Ç–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=get_keyboard_message_pool())

def send_solve_captcha(user_id, example):
    bot.send_message(user_id, "‚ùì–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: " + str(example), reply_markup=get_keyboard_captcha())

def send_you_operator(user_id):
    bot.send_message(user_id, f"üîπ –í—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å Telegram ID: {user_id}", reply_markup=get_operator_keyboard())

def send_incorrect_unswer_captcha(user_id):
    bot.send_message(user_id, "‚ùó–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ!", reply_markup=get_keyboard_captcha())

def send_passed_captcha(user_id):
    bot.send_message(user_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_keyboard())

def send_description(user_id):
    description = (
        "üá∑üá∫ *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –¥–≤–∏–∂–µ–Ω–∏—é \"–°–≤–æ–±–æ–¥–Ω–∞—è –†–æ—Å—Å–∏—è!\"*\n\n"
        "üîò –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –†–æ—Å—Å–∏–∏ –∏ –ø–æ–º–æ—á—å –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –Ω–∞—Ä–æ–¥–Ω–æ–º—É –¥–≤–∏–∂–µ–Ω–∏—é. "
        "–í–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à—É —Å—Ç—Ä–∞–Ω—É —Å–≤–æ–±–æ–¥–Ω–æ–π –æ—Ç –ø—Ä–µ—Å—Ç—É–ø–Ω–æ–≥–æ, –∫—Ä–æ–≤–∞–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±—É–¥—É—â–µ–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∞ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç.\n\n"
        "üîò –í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –Ω–∞—à–∏ —Ä—è–¥—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –±–æ—Ä—å–±—É –∑–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å. –ó–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏ –ø—É—Ç–∏–Ω—Å–∫–æ–º—É —Ä–µ–∂–∏–º—É –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞.\n\n"
        "üîò –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\". –¢–∞–∫–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.\n\n"
        "üîò –ë—É–¥—É—â–µ–µ –†–æ—Å—Å–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∞—Å!"
    )
    bot.send_message(user_id, description, reply_markup=get_main_keyboard(), parse_mode="Markdown")

def send_warn_message_length(user_id):
    bot.send_message(user_id, "‚ùó–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å –ø–æ–Ω—è—Ç–Ω–µ–µ.", reply_markup=get_keyboard_message_pool())

def send_warn_you_cant_send_stickers(user_id):
    bot.send_message(user_id, "‚ùó–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç—É —Å—Ç–∏–∫–µ—Ä—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º, –≥–æ–ª–æ—Å–æ–≤—ã–º, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.", reply_markup=get_keyboard_message_pool())

def send_unknown_file_type(user_id):
    bot.send_message(user_id, "‚ùó–¢–∞–∫–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± (—Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ).", reply_markup=get_keyboard_message_pool())

def send_message_sent_to_operator(user_id):
    bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=get_keyboard_message_pool())

def send_you_in_message_pool(user_id):
    text = (
        "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–¥–µ—Å—å!\n\n"
        "‚ùó–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –ª—é–±–æ–π –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—è–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤–æ–∏–Ω—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —à—Ç–∞–±–æ–≤ –∏ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–∏–ª, "
        "–ø–ª–∞–Ω–∞–º–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ü–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –í—Å—ë —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –≤ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.\n\n"
        "‚ùó–•–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Ä–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ –∏–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∂–∏–º–∞? –ü–∏—à–∏—Ç–µ! –ü–æ–º–æ–∂–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ü–∑–∞—â–∏—Ç—É.\n\n"
        "‚ùó–í–∞—à–µ –æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç-–±–æ—Ç–æ–º –æ—Å—Ç–∞—ë—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã.\n\n"
        "‚óÄÔ∏è –ò–∑–º–µ–Ω–∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞–∑–∞–¥\"."
    )
    bot.send_message(user_id, text, reply_markup=get_keyboard_message_pool())

def send_you_in_main_menu(user_id):
    bot.send_message(user_id, "üîò –í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n\n‚ñ∂Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=get_main_keyboard())

def send_warn_characters_forbidden(user_id):
    bot.send_message(user_id, "‚ùó–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –°–∏–º–≤–æ–ª—ã '<', '>' –∏ '\\\\' –∑–∞–ø—Ä–µ—â–µ–Ω—ã!", reply_markup=get_keyboard_message_pool())

# =============================
# –ö–õ–ê–í–´
# =============================

def get_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton(BTN_SEND))
    kb.add(types.KeyboardButton(BTN_INST))
    return kb

def get_operator_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton(BTN_OP_HELP))
    return kb

def get_keyboard_message_pool():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton(BTN_BACK))
    return kb

def get_keyboard_captcha():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton(BTN_NEW))
    return kb

# =============================
# –ú–ï–î–ò–ê–ì–†–£–ü–ü–´
# =============================

def _flush_media_group(group_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –æ–¥–Ω–æ–π –ø–∞—á–∫–æ–π."""
    grp = media_group_dict.pop(group_id, None)
    if not grp:
        return

    # –ê–Ω—Ç–∏—Ñ–ª—É–¥
    uid = grp['user_id']
    now = time.time()
    if not can_send_message(uid, now):
        return
    user_data[uid]["last_message_time"] = now

    
    items = grp['items']
    if not items:
        return
    
    if grp['caption']:
        if isinstance(items[0], telebot.types.InputMediaPhoto):
            items[0].caption = grp['sender_info'] + "<b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n" + grp['caption']
            items[0].parse_mode = 'HTML'
        elif isinstance(items[0], telebot.types.InputMediaVideo):
            items[0].caption = grp['sender_info'] + "<b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n" + grp['caption']
            items[0].parse_mode = 'HTML'
    else:
        if isinstance(items[0], (telebot.types.InputMediaPhoto, telebot.types.InputMediaVideo)):
            items[0].caption = grp['sender_info']
            items[0].parse_mode = 'HTML'

    for operator_id in operators:
        try:
            bot.send_media_group(operator_id, items)
        except Exception as e:
            logging.error(f"send_media_group error to {operator_id}: {e}")
    send_message_sent_to_operator(uid)

def _schedule_group_flush(group_id, delay=1.2):
    """–ó–∞–ø—É—Å–∫–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    grp = media_group_dict.get(group_id)
    if not grp:
        return
    timer = grp.get('timer')
    if timer and timer.is_alive():
        try:
            timer.cancel()
        except Exception:
            pass
    t = threading.Timer(delay, _flush_media_group, args=[group_id])
    grp['timer'] = t
    t.start()

def _append_media_group_item(message, sender_info):
    """–ö–ª–∞–¥—ë–º —ç–ª–µ–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É."""
    gid = message.media_group_id
    if gid not in media_group_dict:
        media_group_dict[gid] = {
            'items': [],
            'timer': None,
            'caption': message.caption or "",
            'user_id': message.from_user.id,
            'sender_info': sender_info,
            'last_update': time.time()
        }
    grp = media_group_dict[gid]

    if message.photo:
        file_id = message.photo[-1].file_id
        grp['items'].append(telebot.types.InputMediaPhoto(media=file_id))
    elif message.video:
        file_id = message.video.file_id
        grp['items'].append(telebot.types.InputMediaVideo(media=file_id))

    grp['last_update'] = time.time()
    _schedule_group_flush(gid)

# =============================
# –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =============================

def user_message_handler(user_id, message):
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    message_timestamp = message.date
    message_text = message.text
    current_time = time.time()

    if message_text:
        if '\\\\' in message_text or '<' in message_text or '>' in message_text:
            send_warn_characters_forbidden(user_id)
            return

    moscow_timezone = pytz.timezone('Europe/Moscow')
    message_time = datetime.datetime.fromtimestamp(message_timestamp, tz=pytz.utc).astimezone(moscow_timezone)

    sender_info = f'<b>Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\n'
    if username:
        sender_info += f'<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n'
    if first_name:
        sender_info += f'<b>–ò–º—è:</b> {first_name}\n'
    if last_name:
        sender_info += f'<b>–§–∞–º–∏–ª–∏—è:</b> {last_name}\n'
    sender_info += f'<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è [–ú–°–ö]:</b> {message_time.strftime("%Y-%m-%d %H:%M:%S")}\n'

    # –¢–ï–ö–°–¢
    if message.text and not message.media_group_id:
        if len(message.text) <= 8:
            send_warn_message_length(user_id)
            return
        if not can_send_message(user_id, current_time):
            return
        for operator_id in operators:
            bot.send_message(operator_id, sender_info + f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\\n{message_text}', parse_mode='HTML')
        user_data[user_id]["last_message_time"] = current_time
        send_message_sent_to_operator(user_id)
        return

    # –ú–ï–î–ò–ê (–≤–∫–ª—é—á–∞—è caption –∏ —Å–º–µ—à–∞–Ω–Ω—É—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É)
    if message.media_group_id:
        _append_media_group_item(message, sender_info)
        return

    # –û–¥–∏–Ω–æ—á–Ω—ã–µ –º–µ–¥–∏–∞/—Ñ–∞–π–ª—ã –≤–Ω–µ –≥—Ä—É–ø–ø—ã
    if message.photo:
        file_id = message.photo[-1].file_id
        if message.caption:
            for operator_id in operators:
                bot.send_photo(operator_id, file_id, caption=sender_info + f'<b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\\n{message.caption}', parse_mode='HTML')
        else:
            for operator_id in operators:
                bot.send_photo(operator_id, file_id, caption=sender_info, parse_mode='HTML')
        send_message_sent_to_operator(user_id)
        return

    if message.video:
        file_id = message.video.file_id
        if message.caption:
            for operator_id in operators:
                bot.send_video(operator_id, file_id, caption=sender_info + f'<b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\\n{message.caption}', parse_mode='HTML')
        else:
            for operator_id in operators:
                bot.send_video(operator_id, file_id, caption=sender_info, parse_mode='HTML')
        send_message_sent_to_operator(user_id)
        return

    if message.voice:
        file_id = message.voice.file_id
        if message.caption:
            for operator_id in operators:
                bot.send_voice(operator_id, file_id, caption=sender_info + f'<b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\\n{message.caption}', parse_mode='HTML')
        else:
            for operator_id in operators:
                bot.send_voice(operator_id, file_id, caption=sender_info, parse_mode='HTML')
        send_message_sent_to_operator(user_id)
        return

    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
        for operator_id in operators:
            bot.send_message(operator_id, sender_info + f'<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è:</b>', parse_mode='HTML')
            bot.send_location(operator_id, latitude, longitude)
        send_message_sent_to_operator(user_id)
        return

    if message.document:
        file_id = message.document.file_id
        if message.caption:
            for operator_id in operators:
                bot.send_document(operator_id, file_id, caption=sender_info + f'<b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\\n{message.caption}', parse_mode='HTML')
        else:
            for operator_id in operators:
                bot.send_document(operator_id, file_id, caption=sender_info, parse_mode='HTML')
        send_message_sent_to_operator(user_id)
        return

    if message.sticker:
        send_warn_you_cant_send_stickers(user_id)
        return

    send_unknown_file_type(user_id)

# =============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# =============================

@bot.message_handler(func=lambda message: message, content_types=['audio','photo','voice','video','document','text','location','contact','sticker'])
def handle_message(message):
    user_id = message.from_user.id
    message_text = message.text or ""

    # –û–ü–ï–†–ê–¢–û–†–´
    if user_id in operators:
        if is_command(message_text) and message_text.startswith("/add_operator"):
            args = message_text.split(' ')
            if len(args) >= 2:
                add_operator(user_id, args[1])
            else:
                bot.send_message(user_id, "‚ùó–£–∫–∞–∂–∏—Ç–µ Telegram ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=get_operator_keyboard())
            return

        if is_command(message_text) and message_text.startswith("/remove_operator"):
            args = message_text.split(' ')
            if len(args) >= 2:
                remove_operator(user_id, args[1])
            else:
                bot.send_message(user_id, "‚ùó–£–∫–∞–∂–∏—Ç–µ Telegram ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=get_operator_keyboard())
            return

        if is_command(message_text) and message_text.startswith("/list_operator"):
            bot.send_message(user_id, f"üîò –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–∏—Å—Ç–µ–º—ã: {list_operator()}", reply_markup=get_operator_keyboard())
            return

        if is_command(message_text) and message_text.startswith("/send_answer"):
            parts = message_text.split(' ', 2)
            if len(parts) < 3:
                bot.send_message(user_id, "‚ùó–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_answer <telegram_id> <—Ç–µ–∫—Å—Ç>", reply_markup=get_operator_keyboard())
                return
            target_id_str, answer_text = parts[1], parts[2].strip()
            if not telegram_id_check(target_id_str):
                bot.send_message(user_id, "‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID", reply_markup=get_operator_keyboard())
                return
            target_id = int(target_id_str)
            try:
                bot.send_message(target_id, f"üì© –û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{answer_text}")
                bot.send_message(user_id, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            except Exception as e:
                bot.send_message(user_id, f"‚ùó–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            return

        if is_command(message_text) and message_text == BTN_OP_HELP:
            bot.send_message(user_id,
                "üìñ –ö–æ–º–∞–Ω–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n"
                "üîò /list_operator ‚Äî —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
                "üîò /add_operator [telegram_id] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n"
                "üîò /remove_operator [telegram_id] ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n"
                "üîò /send_answer [telegram_id] [—Ç–µ–∫—Å—Ç] ‚Äî –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                reply_markup=get_operator_keyboard()
            )
            return

        #–ü—Ä–æ—á–µ–µ
        send_you_operator(user_id)
        return

    # –Æ–ó–ï–†–´
    if (not user_data.get(user_id)) or (message_text == "/start"):
        new_user(user_id)
        send_bottask_message(user_id)
        generate_captcha(user_id)
        return

    # –ö–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã
    if not need_captcha(user_id):
        if is_command(message_text) and message_text == BTN_INST:
            send_instruction(user_id)
            return
        elif is_command(message_text) and message_text == BTN_SEND:
            user_data[user_id]["message_pool_status"] = True
            send_you_in_message_pool(user_id)
            return
        elif not is_command(message_text) and message_pool(user_id):
            user_message_handler(user_id, message)
            return
        elif is_command(message_text) and message_text == BTN_BACK:
            user_data[user_id]["message_pool_status"] = False
            send_you_in_main_menu(user_id)
            return
        elif is_command(message_text) and message_text == "/get_telegram_id":
            bot.send_message(user_id, f"–¢–≤–æ–π Telegram ID: {user_id}")
            return

    if is_command(message_text) and message_text == BTN_NEW:
        generate_captcha(user_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
    if str(user_data[user_id]["captcha_answer"]) == message_text:
        user_data[user_id]["captcha_status"] = True
        send_passed_captcha(user_id)
        send_description(user_id)
    else:
        send_incorrect_unswer_captcha(user_id)
        generate_captcha(user_id)



def run_bot():
    while True:
        try:
            print("[BOT] Start!")
            print(f"[BOT] Operators: {operators}")
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            error_message = f"[BOT] ERROR: {str(e)}"
            print(error_message)
            logging.error(error_message)
            print("[BOT] Retry connecting after 10 seconds...")
            time.sleep(10)

clear_dict_thread = threading.Thread(target=run_clear_dict_scheduler, daemon=True)
bot_thread = threading.Thread(target=run_bot, daemon=True)

clear_dict_thread.start()
bot_thread.start()

clear_dict_thread.join()
bot_thread.join()
